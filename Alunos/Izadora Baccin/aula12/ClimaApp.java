import org.json.JSONObject;
import org.json.JSONException;
import java.util.Scanner;
import java.net.http.HttpConnectTimeoutException;
import java.net.UnknownHostException;

public class ClimaApp {

    public static void executar() {
        Scanner scanner = new Scanner(System.in);
        String cidade;
        String estado;
        String local;
        String apiKey = "VV8CX2RZJMV3CYAV4UJ4UQS3L";

        boolean entradaValida;
        do {
            System.out.print("Digite a cidade: ");
            cidade = scanner.nextLine().trim();

            System.out.print("Digite a sigla do estado (ex: SP, RJ): ");
            estado = scanner.nextLine().trim();

            if (cidade.isEmpty() || estado.isEmpty()) {
                System.out.println("‚ùå Cidade e/ou estado n√£o podem estar vazios. Por favor, tente novamente.");
                entradaValida = false;
            } else if (estado.length() != 2 || !estado.matches("[a-zA-Z]+")) {
                System.out.println("‚ùå Sigla do estado inv√°lida. Por favor, digite duas letras (ex: SP, RJ).");
                entradaValida = false;
            } else {
                entradaValida = true;
            }
        } while (!entradaValida);

        local = cidade + "," + estado;

        try {
            ClienteApiClima apiClient = new ClienteApiClima(apiKey);
            String jsonResponse = apiClient.obterDadosClima(local);

            JSONObject json = new JSONObject(jsonResponse);
            if (!json.has("days") || json.getJSONArray("days").isEmpty()) {
                System.out.println("‚ùå Dados de clima para o local especificado n√£o encontrados. Verifique a cidade e o estado.");
                return;
            }

            JSONObject dia = json.getJSONArray("days").getJSONObject(0);
            JSONObject atual = json.getJSONObject("currentConditions");

            System.out.println("\nüìç Local: " + cidade + " - " + estado.toUpperCase());
            System.out.println("üå° Temperatura atual: " + atual.optDouble("temp", Double.NaN) + "¬∞C");
            System.out.println("üìà M√°xima: " + dia.optDouble("tempmax", Double.NaN) + "¬∞C");
            System.out.println("üìâ M√≠nima: " + dia.optDouble("tempmin", Double.NaN) + "¬∞C");
            System.out.println("üíß Umidade: " + atual.optDouble("humidity", Double.NaN) + "%");
            System.out.println("üå• Condi√ß√£o do tempo: " + atual.optString("conditions", "N/A"));
            System.out.println("üåß Precipita√ß√£o: " + atual.optDouble("precip", 0.0) + " mm");
            System.out.println("üí® Vento: " + atual.optDouble("windspeed", Double.NaN) + " km/h, dire√ß√£o " + atual.optDouble("winddir", Double.NaN) + "¬∞");

        } catch (HttpConnectTimeoutException e) {
            System.out.println("‚ùå Erro de conex√£o: Tempo limite excedido ao tentar conectar ao servidor. Verifique sua conex√£o com a internet.");
        } catch (UnknownHostException e) {
            System.out.println("‚ùå Erro de rede: N√£o foi poss√≠vel resolver o endere√ßo do servidor. Verifique sua conex√£o com a internet.");
        } catch (JSONException e) { // Capturar JSONException antes de RuntimeException ou Exception
            System.out.println("‚ùå Erro ao processar os dados do clima (JSON inv√°lido). Pode ser um problema tempor√°rio da API ou dados inesperados.");
            System.out.println("Detalhes t√©cnicos: " + e.getMessage());
        } catch (RuntimeException e) { // Captura a exce√ß√£o lan√ßada por ClienteApiClima
            System.out.println("‚ùå Erro na requisi√ß√£o da API: " + e.getMessage() + ". Verifique se a cidade e estado est√£o corretos.");
        } catch (Exception e) {
            System.out.println("‚ùå Ocorreu um erro inesperado: " + e.getMessage());
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }
}

